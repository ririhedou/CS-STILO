
find glibc/ -name syscalls.list

grep -e "\(strong\|weak\)_alias[[:space:]]*([^(]*,.*)" -r glibc-2.15/ >>alias


usr/include/x86_64-linux-gnu/asm/
usr/include/x86_64-linux-gnu/bits/


how to get system call wrapper function names:

(1) from usr/include/x86_64-linux-gnu/asm/unistd_64.h, get all system call names

(2) alias from from syscall.list in glibc

(3) alias from searching glibc source code

(4) naming conventions? not included for now
__libc_
__
__syscall_

issue:
e.g.

* fstat related is not seen in program analysis, only fxstat relaed is
but fstat is seen in traces

current approach, add to name_map:
_fxstat,fstat
_lxstat,lstat
_xmknod,mknod
_xstat,stat
sigaction, rt_sigaction
_exit, exit_group
exit, exit_group

todo:
*merge other uncalled function matrix or merge them into main matrix before merging? which is better?
*unseen syscall in traces: arch_prctl, ...
*__fxstatat? different from fstat related?
*how system run an executable

*which system calls are used by which glibc function

*get wrapper function by compiling and print out info?

*identify system call transition earlier???



